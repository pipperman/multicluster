// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"multicluster/internal/data/ent/cluster"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClusterCreate is the builder for creating a Cluster entity.
type ClusterCreate struct {
	config
	mutation *ClusterMutation
	hooks    []Hook
}

// SetClusterID sets the "cluster_id" field.
func (cc *ClusterCreate) SetClusterID(s string) *ClusterCreate {
	cc.mutation.SetClusterID(s)
	return cc
}

// SetName sets the "name" field.
func (cc *ClusterCreate) SetName(s string) *ClusterCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetClusterType sets the "cluster_type" field.
func (cc *ClusterCreate) SetClusterType(s string) *ClusterCreate {
	cc.mutation.SetClusterType(s)
	return cc
}

// SetNillableClusterType sets the "cluster_type" field if the given value is not nil.
func (cc *ClusterCreate) SetNillableClusterType(s *string) *ClusterCreate {
	if s != nil {
		cc.SetClusterType(*s)
	}
	return cc
}

// SetClusterSpec sets the "cluster_spec" field.
func (cc *ClusterCreate) SetClusterSpec(s string) *ClusterCreate {
	cc.mutation.SetClusterSpec(s)
	return cc
}

// SetVersion sets the "version" field.
func (cc *ClusterCreate) SetVersion(s string) *ClusterCreate {
	cc.mutation.SetVersion(s)
	return cc
}

// SetProfile sets the "profile" field.
func (cc *ClusterCreate) SetProfile(s string) *ClusterCreate {
	cc.mutation.SetProfile(s)
	return cc
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (cc *ClusterCreate) SetNillableProfile(s *string) *ClusterCreate {
	if s != nil {
		cc.SetProfile(*s)
	}
	return cc
}

// SetRegionID sets the "region_id" field.
func (cc *ClusterCreate) SetRegionID(s string) *ClusterCreate {
	cc.mutation.SetRegionID(s)
	return cc
}

// SetVpcID sets the "vpc_id" field.
func (cc *ClusterCreate) SetVpcID(s string) *ClusterCreate {
	cc.mutation.SetVpcID(s)
	return cc
}

// SetZoneID sets the "zone_id" field.
func (cc *ClusterCreate) SetZoneID(s string) *ClusterCreate {
	cc.mutation.SetZoneID(s)
	return cc
}

// SetEnableDeletionProtection sets the "enable_deletion_protection" field.
func (cc *ClusterCreate) SetEnableDeletionProtection(b bool) *ClusterCreate {
	cc.mutation.SetEnableDeletionProtection(b)
	return cc
}

// SetNillableEnableDeletionProtection sets the "enable_deletion_protection" field if the given value is not nil.
func (cc *ClusterCreate) SetNillableEnableDeletionProtection(b *bool) *ClusterCreate {
	if b != nil {
		cc.SetEnableDeletionProtection(*b)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ClusterCreate) SetCreatedAt(t time.Time) *ClusterCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ClusterCreate) SetNillableCreatedAt(t *time.Time) *ClusterCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ClusterCreate) SetUpdatedAt(t time.Time) *ClusterCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ClusterCreate) SetNillableUpdatedAt(t *time.Time) *ClusterCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ClusterCreate) SetID(i int64) *ClusterCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the ClusterMutation object of the builder.
func (cc *ClusterCreate) Mutation() *ClusterMutation {
	return cc.mutation
}

// Save creates the Cluster in the database.
func (cc *ClusterCreate) Save(ctx context.Context) (*Cluster, error) {
	var (
		err  error
		node *Cluster
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClusterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClusterCreate) SaveX(ctx context.Context) *Cluster {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cc *ClusterCreate) defaults() {
	if _, ok := cc.mutation.ClusterType(); !ok {
		v := cluster.DefaultClusterType
		cc.mutation.SetClusterType(v)
	}
	if _, ok := cc.mutation.Profile(); !ok {
		v := cluster.DefaultProfile
		cc.mutation.SetProfile(v)
	}
	if _, ok := cc.mutation.EnableDeletionProtection(); !ok {
		v := cluster.DefaultEnableDeletionProtection
		cc.mutation.SetEnableDeletionProtection(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := cluster.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := cluster.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClusterCreate) check() error {
	if _, ok := cc.mutation.ClusterID(); !ok {
		return &ValidationError{Name: "cluster_id", err: errors.New("ent: missing required field \"cluster_id\"")}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := cc.mutation.ClusterType(); !ok {
		return &ValidationError{Name: "cluster_type", err: errors.New("ent: missing required field \"cluster_type\"")}
	}
	if _, ok := cc.mutation.ClusterSpec(); !ok {
		return &ValidationError{Name: "cluster_spec", err: errors.New("ent: missing required field \"cluster_spec\"")}
	}
	if _, ok := cc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New("ent: missing required field \"version\"")}
	}
	if _, ok := cc.mutation.Profile(); !ok {
		return &ValidationError{Name: "profile", err: errors.New("ent: missing required field \"profile\"")}
	}
	if _, ok := cc.mutation.RegionID(); !ok {
		return &ValidationError{Name: "region_id", err: errors.New("ent: missing required field \"region_id\"")}
	}
	if _, ok := cc.mutation.VpcID(); !ok {
		return &ValidationError{Name: "vpc_id", err: errors.New("ent: missing required field \"vpc_id\"")}
	}
	if _, ok := cc.mutation.ZoneID(); !ok {
		return &ValidationError{Name: "zone_id", err: errors.New("ent: missing required field \"zone_id\"")}
	}
	if _, ok := cc.mutation.EnableDeletionProtection(); !ok {
		return &ValidationError{Name: "enable_deletion_protection", err: errors.New("ent: missing required field \"enable_deletion_protection\"")}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (cc *ClusterCreate) sqlSave(ctx context.Context) (*Cluster, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (cc *ClusterCreate) createSpec() (*Cluster, *sqlgraph.CreateSpec) {
	var (
		_node = &Cluster{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cluster.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cluster.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.ClusterID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cluster.FieldClusterID,
		})
		_node.ClusterID = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cluster.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.ClusterType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cluster.FieldClusterType,
		})
		_node.ClusterType = value
	}
	if value, ok := cc.mutation.ClusterSpec(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cluster.FieldClusterSpec,
		})
		_node.ClusterSpec = value
	}
	if value, ok := cc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cluster.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := cc.mutation.Profile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cluster.FieldProfile,
		})
		_node.Profile = value
	}
	if value, ok := cc.mutation.RegionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cluster.FieldRegionID,
		})
		_node.RegionID = value
	}
	if value, ok := cc.mutation.VpcID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cluster.FieldVpcID,
		})
		_node.VpcID = value
	}
	if value, ok := cc.mutation.ZoneID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cluster.FieldZoneID,
		})
		_node.ZoneID = value
	}
	if value, ok := cc.mutation.EnableDeletionProtection(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: cluster.FieldEnableDeletionProtection,
		})
		_node.EnableDeletionProtection = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cluster.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cluster.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ClusterCreateBulk is the builder for creating many Cluster entities in bulk.
type ClusterCreateBulk struct {
	config
	builders []*ClusterCreate
}

// Save creates the Cluster entities in the database.
func (ccb *ClusterCreateBulk) Save(ctx context.Context) ([]*Cluster, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cluster, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClusterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClusterCreateBulk) SaveX(ctx context.Context) []*Cluster {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
