// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.2

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ComponentHTTPServer interface {
	Config(context.Context, *ComponentRequest) (*ComponentConfigReply, error)
	GetComponent(context.Context, *ComponentRequest) (*ComponentReply, error)
	ListComponent(context.Context, *ComponentListRequest) (*ComponentListReply, error)
}

func RegisterComponentHTTPServer(s *http.Server, srv ComponentHTTPServer) {
	r := s.Route("/")
	r.PUT("/api/v1/{cluster_id}/components/config", _Component_Config0_HTTP_Handler(srv))
	r.GET("/api/v1/{cluster_id}/components", _Component_GetComponent0_HTTP_Handler(srv))
	r.GET("/api/v1/{cluster_id}/components", _Component_ListComponent0_HTTP_Handler(srv))
}

func _Component_Config0_HTTP_Handler(srv ComponentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ComponentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cluster.v1.Component/Config")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Config(ctx, req.(*ComponentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ComponentConfigReply)
		return ctx.Result(200, reply)
	}
}

func _Component_GetComponent0_HTTP_Handler(srv ComponentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ComponentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cluster.v1.Component/GetComponent")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetComponent(ctx, req.(*ComponentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ComponentReply)
		return ctx.Result(200, reply)
	}
}

func _Component_ListComponent0_HTTP_Handler(srv ComponentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ComponentListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cluster.v1.Component/ListComponent")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListComponent(ctx, req.(*ComponentListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ComponentListReply)
		return ctx.Result(200, reply)
	}
}

type ComponentHTTPClient interface {
	Config(ctx context.Context, req *ComponentRequest, opts ...http.CallOption) (rsp *ComponentConfigReply, err error)
	GetComponent(ctx context.Context, req *ComponentRequest, opts ...http.CallOption) (rsp *ComponentReply, err error)
	ListComponent(ctx context.Context, req *ComponentListRequest, opts ...http.CallOption) (rsp *ComponentListReply, err error)
}

type ComponentHTTPClientImpl struct {
	cc *http.Client
}

func NewComponentHTTPClient(client *http.Client) ComponentHTTPClient {
	return &ComponentHTTPClientImpl{client}
}

func (c *ComponentHTTPClientImpl) Config(ctx context.Context, in *ComponentRequest, opts ...http.CallOption) (*ComponentConfigReply, error) {
	var out ComponentConfigReply
	pattern := "/api/v1/{cluster_id}/components/config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cluster.v1.Component/Config"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ComponentHTTPClientImpl) GetComponent(ctx context.Context, in *ComponentRequest, opts ...http.CallOption) (*ComponentReply, error) {
	var out ComponentReply
	pattern := "/api/v1/{cluster_id}/components"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/cluster.v1.Component/GetComponent"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ComponentHTTPClientImpl) ListComponent(ctx context.Context, in *ComponentListRequest, opts ...http.CallOption) (*ComponentListReply, error) {
	var out ComponentListReply
	pattern := "/api/v1/{cluster_id}/components"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/cluster.v1.Component/ListComponent"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
