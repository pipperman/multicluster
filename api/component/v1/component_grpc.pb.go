// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.1
// source: component/v1/component.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComponentClient is the client API for Component service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentClient interface {
	Config(ctx context.Context, in *ComponentRequest, opts ...grpc.CallOption) (*ComponentConfigReply, error)
	GetComponent(ctx context.Context, in *ComponentRequest, opts ...grpc.CallOption) (*ComponentReply, error)
	ListComponent(ctx context.Context, in *ComponentListRequest, opts ...grpc.CallOption) (*ComponentListReply, error)
}

type componentClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentClient(cc grpc.ClientConnInterface) ComponentClient {
	return &componentClient{cc}
}

func (c *componentClient) Config(ctx context.Context, in *ComponentRequest, opts ...grpc.CallOption) (*ComponentConfigReply, error) {
	out := new(ComponentConfigReply)
	err := c.cc.Invoke(ctx, "/cluster.v1.Component/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentClient) GetComponent(ctx context.Context, in *ComponentRequest, opts ...grpc.CallOption) (*ComponentReply, error) {
	out := new(ComponentReply)
	err := c.cc.Invoke(ctx, "/cluster.v1.Component/GetComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentClient) ListComponent(ctx context.Context, in *ComponentListRequest, opts ...grpc.CallOption) (*ComponentListReply, error) {
	out := new(ComponentListReply)
	err := c.cc.Invoke(ctx, "/cluster.v1.Component/ListComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentServer is the server API for Component service.
// All implementations must embed UnimplementedComponentServer
// for forward compatibility
type ComponentServer interface {
	Config(context.Context, *ComponentRequest) (*ComponentConfigReply, error)
	GetComponent(context.Context, *ComponentRequest) (*ComponentReply, error)
	ListComponent(context.Context, *ComponentListRequest) (*ComponentListReply, error)
	mustEmbedUnimplementedComponentServer()
}

// UnimplementedComponentServer must be embedded to have forward compatible implementations.
type UnimplementedComponentServer struct {
}

func (UnimplementedComponentServer) Config(context.Context, *ComponentRequest) (*ComponentConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedComponentServer) GetComponent(context.Context, *ComponentRequest) (*ComponentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponent not implemented")
}
func (UnimplementedComponentServer) ListComponent(context.Context, *ComponentListRequest) (*ComponentListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponent not implemented")
}
func (UnimplementedComponentServer) mustEmbedUnimplementedComponentServer() {}

// UnsafeComponentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentServer will
// result in compilation errors.
type UnsafeComponentServer interface {
	mustEmbedUnimplementedComponentServer()
}

func RegisterComponentServer(s grpc.ServiceRegistrar, srv ComponentServer) {
	s.RegisterService(&Component_ServiceDesc, srv)
}

func _Component_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.v1.Component/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServer).Config(ctx, req.(*ComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Component_GetComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServer).GetComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.v1.Component/GetComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServer).GetComponent(ctx, req.(*ComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Component_ListComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServer).ListComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.v1.Component/ListComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServer).ListComponent(ctx, req.(*ComponentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Component_ServiceDesc is the grpc.ServiceDesc for Component service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Component_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.v1.Component",
	HandlerType: (*ComponentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Config",
			Handler:    _Component_Config_Handler,
		},
		{
			MethodName: "GetComponent",
			Handler:    _Component_GetComponent_Handler,
		},
		{
			MethodName: "ListComponent",
			Handler:    _Component_ListComponent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "component/v1/component.proto",
}
